Parameters:
  # LatestAmiId:
  #   Description: "AMI for EC2"
  #   Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  #   Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  PreBuiltAmi:
    Description: AMI-Id for EC2 Instance
    Type: "AWS::EC2::Image::Id"
  SSHKey:
    Description: "SSH KeyPair for the EC2 Instance"
    Type: "AWS::EC2::KeyPair::KeyName"
  OpulenceS3Storage:
    Description: S3 Bucket Name containing the /dist folder and main.py for Opulence
    Type: String
    Default: op-storage

Resources:
  SGInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      # VpcId: !Ref VPC
      GroupDescription: Control access to EC2 Instance
      SecurityGroupIngress: 
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTPS IPv4 IN'
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow SSH IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackId}
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Required for installing CodeDeploy agent on EC2 instances w/SSM
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "arn:aws:s3:::${OpulenceS3Storage}"
                  - !Sub "arn:aws:s3:::${OpulenceS3Storage}/*"
        - PolicyName: GetCodeDeployAgent
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
               - "s3:Get*"
               - "s3:List*"
              Resource:
                - "arn:aws:s3:::codepipeline-us-east-1-415359081786/*"
                - "arn:aws:s3:::aws-codedeploy-us-east-1/*"
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy: # Used with Cfn-Signal
      ResourceSignal:
        Timeout: PT15M
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref PreBuiltAmi
      KeyName: !Ref SSHKey
      SecurityGroupIds:
        - !Ref SGInstance
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: "Name"
          Value: !Sub ${AWS::StackId}
        - Key: CodeDeployEC2
          Value: PROD
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          aws s3 cp s3://${OpulenceS3Storage}/ /home/ec2-user --recursive
          cd /home/ec2-user/src 
          rm -r /usr/share/nginx/html/dist
          cd /home/ec2-user
          npm run build
          sed -i s/ADDRESS/_/1 nginx.conf
          mv dist /usr/share/nginx/html
          mv nginx.conf /etc/nginx/conf.d
          systemctl start nginx
          pip3 install -r requirements.txt

          yum -y install docker
          systemctl start docker
          docker run -d -p6379:6379 redis

          export PYTHON_ENV=prod
          
          # run a screen in detached mode as ec2-user (root user gets logged-out, which removes the screen session) and execute main.py
          runuser -l ec2-user -c 'screen -dmS "backend" python3.9 main.py'

          # Cfn Signal:
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}
          
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name: "httpTG1Opulence"
      Port: 80
      Protocol: "HTTP"
      ProtocolVersion: "HTTP1"
      Targets: 
        - Id: !Ref EC2Instance # Instance ID
          
      TargetType: "instance"
      UnhealthyThresholdCount: 2
      VpcId: "vpc-010ad1a2f127382a3" 

  LoadBalancerHTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates: 
        - !Ref ACMCertificate
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: "ELBSecurityPolicy-2016-08"
 
  # Listener to redirect HTTP traffic to HTTPS
  LoadBalancerHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: "redirect"
          RedirectConfig: 
            Port: "443"
            Protocol: "HTTPS"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      SecurityGroups:
        - !GetAtt SGInstance.GroupId # Security Group ID
      Subnets:
        - "subnet-09c2b8e8314eaad74" # us-east-1a
        - "subnet-03c9efa345fbdf060" # us-east-1b
        - "subnet-049fcb1c949fce02c" # us-east-1c
        - "subnet-05b05c16539fee621" # us-east-1d
        - "subnet-08b8d0566606aca24" # us-east-1e
        - "subnet-0a2b5ef5d1f03d512" # us-east-1f
      Type: "application"


  Route53Records:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z0949341G2O2M9659QXN # Id of the Hosted Zone created during domain registration
      RecordSets:
        - Name: www.playopulence.com
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID # Loadbalancer Id
            DNSName: !GetAtt LoadBalancer.DNSName
        - Name: playopulence.com
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID # Loadbalancer Id
            DNSName: !GetAtt LoadBalancer.DNSName
  
  ACMCertificate:
    DependsOn:
      - "EC2Instance"
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.playopulence.com" # wildcard *. allows the use of api.<domain-name>.com
      SubjectAlternativeNames:
        - playopulence.com
        - "*.playopulence.com"
      DomainValidationOptions:
        - DomainName: www.playopulence.com
          HostedZoneId: Z0949341G2O2M9659QXN
      ValidationMethod: DNS

  dynamoDBTable:
    Type: AWS::DynamoDB::Table
    # UpdateReplacePolicy: Retain
    # DeletionPolicy: Retain
    Properties:
      TableName: opulence-data
      BillingMode: PROVISIONED
      ProvisionedThroughput: 
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: "S"
        - AttributeName: SK
          AttributeType: "S"
        - AttributeName: started
          AttributeType: "S"
        - AttributeName: players
          AttributeType: "N"
      KeySchema:
        - AttributeName: PK # Partition Key
          KeyType: HASH
        - AttributeName: SK # Sort Key
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: OpenGamesIndex
          KeySchema:
            - AttributeName: started # Partition Key
              KeyType: HASH
            - AttributeName: players # Sort Key
              KeyType: RANGE
          Projection: 
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 10
            WriteCapacityUnits: 10
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: True
      Tags:
        - Key: Managed-By
          Value: cloudformation
          
Outputs:
  ELBHostedZoneID:
    Description: "CanonicalHostedZoneID of the ELB"
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  EC2PublicIP:
    Description: "EC2 Instance Public IP Address"
    Value: !GetAtt EC2Instance.PublicIp
  ALBDNS:
    Description: "DNS name of the Application Load Balancer"
    Value: !GetAtt LoadBalancer.DNSName
  opulenceEndpoint:
    Value: !Sub https://playopulence.com


      
      